@use 'sass:math';

$utilities: (
  // FLEX-CONTAINER
  "flex-direction": (
    "prefix": "fd",
    "values": (
      "r": row,
      "rr": row-reverse,
      "c": column,
      "cr": column-reverse
    ),
  ),
  "flex-wrap": (
    "prefix": "fr",
    "values": (
      "nw": no-wrap,
      "w": wrap,
      "wr": wrap-reverse
    ),
  ),
  "justify-content": (
    "prefix": "jc",
    "values": (
      "fs": flex-start,
      "fe": flex-end,
      "c": center,
      "sb": space-between,
      "sa": space-around,
      "se": space-evenly
    ),
  ),
  "align-items": (
    "prefix": "ai",
    "values": (
      "fs": flex-start,
      "fe": flex-end,
      "c": center,
      "bl": baseline,
      "fb": first baseline,
      "lb": last baseline,
      "s": start,
      "e": end,
      "ss": self-start,
      "se": self-end,
      "safe": safe,
      "unsafe": unsafe
    ),
  ),
  "align-content": (
    "prefix": "ac",
    "values": (
      "fs": flex-start,
      "fe": flex-end,
      "c": center,
      "sb": space-between,
      "sa": space-around,
      "se": space-evenly,
      "st": stretch,
      "s": start,
      "e": end,
      "bl": baseline,
      "fb": first baseline,
      "lb": last baseline,
      "safe": safe,
      "unsafe": unsafe
    ),
  ),
  // PADDING
  "padding": (
    "prefix": "p",
    "values": (
      "0": 0,
      "1": $base-padding / 2,
      "2": $base-padding * 1,
      "3": $base-padding * 1.5,
      "4": $base-padding * 2,
      "5": $base-padding * 2.5
    ),
  ),
  "padding-left": (
    "prefix": "pl",
    "values": (
      "0": 0,
      "1": $base-padding / 2,
      "2": $base-padding * 1,
      "3": $base-padding * 1.5,
      "4": $base-padding * 2,
      "5": $base-padding * 2.5
    ),
  ),
  "padding-right": (
    "prefix": "pr",
    "values": (
      "0": 0,
      "1": $base-padding / 2,
      "2": $base-padding * 1,
      "3": $base-padding * 1.5,
      "4": $base-padding * 2,
      "5": $base-padding * 2.5
    ),
  ),
  "padding-top": (
    "prefix": "pt",
    "values": (
      "0": 0,
      "1": $base-padding / 2,
      "2": $base-padding * 1,
      "3": $base-padding * 1.5,
      "4": $base-padding * 2,
      "5": $base-padding * 2.5
    ),
  ),
  "padding-bottom": (
    "prefix": "pb",
    "values": (
      "0": 0,
      "1": $base-padding / 2,
      "2": $base-padding * 1,
      "3": $base-padding * 1.5,
      "4": $base-padding * 2,
      "5": $base-padding * 2.5
    ),
  ),
  // MARGIN
  "margin": (
    "prefix": "m",
    "values": (
      "0": 0,
      "1": $base-margin,
      "2": $base-margin * 2,
      "3": $base-margin * 4,
      "4": $base-margin * 6,
      "5": $base-margin * 8,
      "a": auto
    ),
  ),
  "margin-left": (
    "prefix": "ml",
    "values": (
      "a": auto,
      "0": 0,
      "1": $base-margin,
      "2": $base-margin * 2,
      "3": $base-margin * 4,
      "4": $base-margin * 6,
      "5": $base-margin * 8
    ),
  ),
  "margin-right": (
    "prefix": "mr",
    "values": (
      "a": auto,
      "0": 0,
      "1": $base-margin,
      "2": $base-margin * 2,
      "3": $base-margin * 4,
      "4": $base-margin * 6,
      "5": $base-margin * 8
    ),
  ),
  "margin-top": (
    "prefix": "mt",
    "values": (
      "0": 0,
      "1": $base-margin,
      "2": $base-margin * 4,
      "3": $base-margin * 8,
      "4": $base-margin * 12,
      "5": $base-margin * 16
    ),
  ),
  "margin-bottom": (
    "prefix": "mb",
    "values": (
      "0": 0,
      "1": $base-margin,
      "2": $base-margin * 2,
      "3": $base-margin * 4,
      "4": $base-margin * 6,
      "5": $base-margin * 8
    ),
  ),
  // DISPLAY
  "display": (
    "prefix": "display",
    "values": (
      "n": none,
      "b": block,
      "f": flex,
      "i": inline,
      "i-b": inline-block
    )
  ),
  // BORDER-RADIUS
  "border-radius": (
    "prefix": "br",
    "values": (
      "default": $base-border-radius,
      "none": 0,
      "xs": math.div($base-border-radius, 4),
      "sm": math.div($base-border-radius, 2),
      "lg": $base-border-radius * 5,
      "full": 50%,
    )
  ),
  // BORDER
  "border": (
    "prefix": "bd",
    "values": (
      "black": 2px dotted black,
      "gray": 1px ridge gray
    )
  )
);

// generate utility classes
@each $property, $map in $utilities {
  $prefix: map-get($map, "prefix");
  $values: map-get($map, "values");

  @each $k, $v in $values {
    @if($k == "default") {
      .#{$prefix} {
        #{$property}: $v;
      }
    } @else {
      .#{$prefix}-#{$k}{
        #{$property}: $v;
      }
    }
  }
}

// The map-get() function allows you to retrieve a value from a map (also known as a dictionary or associative array) based on 
// a specified key. Syntax:

// map-get($map, $key) 

// $map: The map from which you want to retrieve a value.
// $key: The key associated with the desired value.