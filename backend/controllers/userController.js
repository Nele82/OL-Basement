const User = require("../models/userModel")
const jwtoken = require('jsonwebtoken')
const bcrypt = require('bcrypt') 
const Mailjet = require ('node-mailjet')
// Development & production http front-end server addresses
const devFront = 'http://localhost:3000'
const deployFront = process.env.HTTP_FRONTEND_DEPLOY

// Create JSON Web Token 
const createJWT = (_id) => {
    return jwtoken.sign({_id}, process.env.SECRET_KEY, {expiresIn: '3600000'})
}
// SIGN UP USER
const signupUser = async (req, res) => {

    const {username, email, password} = req.body

    try {
        // 'User' model's 'signup' function checks if there is already
        // a user with the same username and email. If not, it returns a new user object.
        const user = await User.signup(username, email, password)
        // Uses new User's '_id' property to create a JWT
        const jwt = createJWT(user._id) // Creates a JWT
        // Returns username & JWT for authentication purposes
        res.status(200).json({username, jwt})
    } catch (error) {
        res.status(400).json({message: error.message})
    }
}
// LOG IN USER
const loginUser = async (req, res) => {
    const {username, password} = req.body

    try {
        // The User.login function from the 'userModel.js' module compares 
        // existing password hash against the one entered by the user.
        // Only then it returns the user object and below code proceeds.
        const user = await User.login(username, password)

        const jwt = createJWT(user._id) // Creates a JWT
        // Returns username & JWT for authentication purposes
        res.status(200).json({username, jwt})
    } catch (error) {
        res.status(400).json({message: error.message})
    }
}
// PASSWORD RESET REQUEST
const requestReset = async (req, res) => {
    const { email, requestTime } = req.body
    const user = await User.findOne({ email })
    if (!user) {
      return res.status(404).json({message: 'User was not found'})
    }
    // Creates JWT using User id generated by MongoDB and a secret key
    const token = jwtoken.sign({ id: user._id }, process.env.SECRET_KEY, { expiresIn: '600000' })

    const resetLink = `${deployFront}/password-reset?token=${token}`

    // 'MailJet' sends transactional reset email containing the reset link to the User requesting to reset password 
    // Step 1: Connect to the 'MailJet' service via 'apiConnect' method of the 'node-mailjet' library and using your API keys
    const mailjet = Mailjet.apiConnect(
        process.env.MJ_APIKEY_PUBLIC,
        process.env.MJ_APIKEY_PRIVATE
    )
    // Step 2: Creating a request to send an email using the POST method with the 'send' endpoint
    // The email template contains user's email address and username provided by mongoose library's 
    // 'findOne' method using the email address User sent with the request 
    // The email template contains the 'a' html element containing a link to the 'PasswordReset' page at the Frontend 
    // which then checks if the JWT param is present in the URL and opens the password reset form in such case
    // Otherwise, it routes the User back to "Login" page
    const request = mailjet
        .post('send', { version: 'v3.1' })
        .request({
          Messages: [
            {
              From: {
                Email: "ol.basement@gmail.com",
                Name: "OL Basement"
              },
              To: [
                {
                  Email: `${user.email}`,
                  Name: `${user.username}`
                }
              ],
              Subject: `Password reset for ${user.username}`,
              HTMLPart: `<h3>Dear ${user.username},</h3><br />
              <p>We've received a request to reset your password at <b>${requestTime}</b>. If you did not make this 
              request, please ignore this email.<br />To set up a new password, please click on the link below:<br />
              <a href=\"${resetLink}\">Reset Your Password</a><br />This link will take you to a password-reset page where you can enter and confirm 
              your new password.<p/><p><b>NOTE:</b> The password reset link remains valid for <b>only 10 minutes</b> from the moment you requested to reset your password
              on the 'Password Reset Request Form' page (time indicated at the beginning of this message).<br />If you fail to reset your password within the specified 
              time frame or if you receive this email more than 10 minutes after making the request, kindly submit a new request. We appreciate your patience.</p>
              Thank you for using our services!<br /><br />
              Warm regards,<br />OL Basement Team`
            }
          ]
        })
// Step 3: Handling the response using .then() and catching errors with .catch()
request
    .then((result) => {
        res.status(200).json({data: result.body})
    })
    .catch((err) => {
        console.log(err.statusCode)
    })
}
// PASSWORD RESET
const resetPassword = async (req, res) => {
  // After the ‘requestReset’ function generates and forwards the JWT, enabling a user to access 
  // the password reset form for entering the new password, an HTTP POST request is made that 
  // invokes this function, passing both the new password and the generated JWT
  const { token, newPassword } = req.body
  // Received JWT is verified via 'jwtoken' library's 'verify' method
  const decoded = jwtoken.verify(token, process.env.SECRET_KEY)
  // 'User' model searches for the User via decoded '_id' property
  const user = await User.findById(decoded.id)
  // If the code below executes successfully, it indicates that a user is found, and the decoded ID is valid
  try {
      if(user._id.toString() === decoded.id) {
        // New password gets encrypted via 'bcrypt' library
        const salt = await bcrypt.genSalt(10)
        const hashedPassword = await bcrypt.hash(newPassword, salt)
        // 'User' model updates the document via 'mongoose' library's 'updateOne' method 
        // and then returns success message to the Frontend to notify the User
        await User.updateOne({ _id: decoded.id }, { password: hashedPassword })
        res.status(200).json({message: 'Password reset successfully.'})
      }
  } catch (error) {
    res.status(500).json({message: 'An error occurred while resetting your password. Please submit a new password reset request and try again.'})
  }
}

module.exports = {
    signupUser, 
    loginUser,
    requestReset,
    resetPassword
}