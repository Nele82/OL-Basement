// MongoDB - model & library
const Facility = require('../models/storageModel') 

// GET STORAGES
const getAllStorages = async (req, res) => {    
    const user = req.user._id
    // Returns all storage units assigned to the logged in user via the 'Facility' model 
    // and mongoose library's 'find' method using the '_id' property generated by MongoDB
    let storages = await Facility.find({user_id: user})

    try {
        // Returns an empty array if no storage facilities are created
        if (storages.length == 0) {
            return res.status(200).json(storages)
        } else {
            // Returns an array of objects sorted by date (newest first)
            storages = await Facility.find({user_id: user}).sort({createdAt: -1})
            res.status(200).json(storages)
        }
    } catch (error) {
        res.status(400).json({message: error.message})
    }
}

// CREATE A NEW STORAGE
const createStorage = async (req, res) => {
    const {
        facilityName, 
        length, 
        width, 
        height
    } = req.body   
    
    const user_id = req.user._id 
    // Creates a new storage unit via mongoose library's 'create' method and 'Facility' model
    // Adds User's id to the storage which is what actually assigns storage units to the logged in user 
    try {
        const storage = await Facility.create({facilityName, length, width, height, user_id})
        res.status(200).json(storage)
    } catch (error) {
        res.status(400).json({message: error.message})
    }
}

// UPDATE A STORAGE
const updateStorage = async (req, res) => {
    const user = req.user._id 
    const {id} = req.params  
    const {
        facilityName, 
        length, 
        width, 
        height
    } = req.body 
    // Updates a storage unit via mongoose library's 'updateOne' method and 'Facility' model
    // using the '_id' filter generated by MongoDB to determine which document to update 
    try {
        await Facility.updateOne({_id: id}, {$set: {facilityName: facilityName, length: length, width: width, height: height}})
        let storages = await Facility.find({user_id: user})
        // After the storage unit has been updated, the function returns storage facilities, 
        // including the updated facility, sorted from newest to oldest if there is more than one facility
        if (storages.length == 0) {
            return res.status(200).json(storages)
        } else {
            storages = await Facility.find({user_id: user}).sort({createdAt: -1})
        }    
        res.status(200).json(storages)
    } catch (error) {
        res.status(400).json({message: error.message})
    }
}

// DELETE A STORAGE
const removeStorage = async (req, res) => {
    const {id} = req.params
    // Deletes a storage facility from the MongoDB collection via
    // mongoose library's 'deleteOne' method using the storage facility's
    // unique '_id' property assigned by MongoDB
    try {
        const deleteEntry = await Facility.deleteOne({_id: id})
        res.status(200).json(deleteEntry)
    } catch (error) {
        res.status(400).json({message: error.message})
    }
}

module.exports = { 
    getAllStorages,
    createStorage,
    removeStorage,
    updateStorage
}